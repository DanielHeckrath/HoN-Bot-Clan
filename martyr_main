-------------------------------------------------------------
-----------            MARTYR BOT               -------------
-------------------------------------------------------------

local _G = getfenv(0)
local object = _G.object

object.myName = object:GetName()

object.bRunLogic         = true
object.bRunBehaviors    = true
object.bUpdates         = true
object.bUseShop         = true

object.bRunCommands     = true
object.bMoveCommands     = true
object.bAttackCommands     = true
object.bAbilityCommands = true
object.bOtherCommands     = true

object.bReportBehavior = false
object.bDebugUtility = false

object.logger = {}
object.logger.bWriteLog = false
object.logger.bVerboseLog = false

object.core         = {}
object.eventsLib     = {}
object.metadata     = {}
object.behaviorLib     = {}
object.skills         = {}

runfile "bots/core.lua"
runfile "bots/botbraincore.lua"
runfile "bots/eventsLib.lua"
runfile "bots/metadata.lua"
runfile "bots/behaviorLib.lua"

local core, eventsLib, behaviorLib, metadata, skills = object.core, object.eventsLib, object.behaviorLib, object.metadata, object.skills

local print, ipairs, pairs, string, table, next, type, tinsert, tremove, tsort, format, tostring, tonumber, strfind, strsub
    = _G.print, _G.ipairs, _G.pairs, _G.string, _G.table, _G.next, _G.type, _G.table.insert, _G.table.remove, _G.table.sort, _G.string.format, _G.tostring, _G.tonumber, _G.string.find, _G.string.sub
local ceil, floor, pi, tan, atan, atan2, abs, cos, sin, acos, max, random
    = _G.math.ceil, _G.math.floor, _G.math.pi, _G.math.tan, _G.math.atan, _G.math.atan2, _G.math.abs, _G.math.cos, _G.math.sin, _G.math.acos, _G.math.max, _G.math.random

local BotEcho, VerboseLog, BotLog = core.BotEcho, core.VerboseLog, core.BotLog
local Clamp = core.Clamp


BotEcho(object:GetName()..'loading martyr_main...')

--------------------------------
-----Constant Definitions-------
--------------------------------

object.heroName = 'Hero_Martyr'

behaviorLib.StartingItems =
  {"Item_MarkOfTheNovice", "Item_RunesOfTheBlight", "2 Item_MinorTotem", "Item_IronBuckler"}
behaviorLib.LaneItems =
	{"Item_BloodChalice", "Item_PlatedGreaves", "Item_LexTalionis 3"}
behaviorLib.MidItems =
	{"Item_Shield2"} --Shield2 is Helm of the Black Legion
behaviorLib.LateItems =
	{"Item_Morph", "Item_BehemothsHeart"} --Item_Morph is Sheepstick


	----0 is Retribution, 1 is Guardian Angel, 2 is Sacrificial Lamb, 3 is Hand in Hand, 4 is Attributes
object.tSkills = {
    0, 1, 0, 1, 0,
	3, 0, 1, 1, 2,
	3, 2, 2, 2, 2,
	3, 4, 4, 4, 4,
	4, 4, 4, 4, 4
}


object.nRetributionUp = 5
object.nSheepstickUp = 10
object.nLexTalionisUp = 10

object.nRetributionUse = 10
object.nSheepstickUse = 15
object.nLexTalionisUse = 15

object.nRetributionThreshold = 30
object.nSheepstickThreshold = 35
object.nLexTalionisThreshold = 35

----------------------------------
------Bot Function Overrides------
----------------------------------

function object:SkillBuild()
    core.VerboseLog("SkillBuild()")

	local unitSelf = self.core.unitSelf
    if  skills.abilRetribution == nil then
        skills.abilRetribution= unitSelf:GetAbility(0)
        skills.abilGuardianAngel = unitSelf:GetAbility(1)
        skills.abilSacrificialLamb = unitSelf:GetAbility(2)
        skills.abilHandInHand= unitSelf:GetAbility(3)
        skills.abilAttributeBoost = unitSelf:GetAbility(4)
    end
    if unitSelf:GetAbilityPointsAvailable() <= 0 then
        return
    end


    local nLev = unitSelf:GetLevel()
    local nLevPts = unitSelf:GetAbilityPointsAvailable()
    for i = nLev, nLev+nLevPts do
        unitSelf:GetAbility( object.tSkills[i] ):LevelUp()
    end
end


------------------------------------
------OncombatEvent Override--------
------------------------------------

function object:oncombateventOverride(EventData)
    self:oncombateventOld(EventData)

    local nAddBonus = 0

    if EventData.Type == "Ability" then
        if EventData.InflictorName == "Ability_Martyr1" then
            nAddBonus = nAddBonus + object.nRetributionUse
        end
	elseif EventData.Type == "Item" then
		if core.itemSheepstick ~= nil and EventData.SourceUnit == core.unitSelf:GetUniqueID() and EventData.InflictorName == core.itemSheepstick:GetName() then
			nAddBonus = nAddBonus + self.nSheepstickUse
		end
	end

   if nAddBonus > 0 then
        core.DecayBonus(self)
        core.nHarassBonus = core.nHarassBonus + nAddBonus
    end

end
object.oncombateventOld = object.oncombatevent
object.oncombatevent    = object.oncombateventOverride

-----------------------------------------
------CustomHarassUtility Override-------
-----------------------------------------


local function CustomHarassUtilityFnOverride(hero)
    local nUtil = 0
	
    if skills.abilRetribution:CanActivate() then
        nUtil = nUtil + object.nRetributionUp
    end

	if object.itemSheepstick and object.itemSheepstick:CanActivate() then
		nUtil = nUtil + object.nSheepstickUp
	end
	
	if object.itemLexTalionis and object.itemLexTalionis:CanActivate() then
		nUtil = nUtil + object.nLexTalionisUp
	end

    return nUtil
end
behaviorLib.CustomHarassUtility = CustomHarassUtilityFnOverride

-------------------------------
------FindItems Override-------
-------------------------------

local function funcFindItemsOverride(botBrain)
	local bUpdated = object.FindItemsOld(botBrain)

	if core.itemSheepstick ~= nil and not core.itemSheepstick:IsValid() then
		core.itemSheepstick = nil
	end
	
	if core.itemLexTalionis ~= nil and not core.itemLexTalionis:IsValid() then
		core.itemLexTalionis = nil
	end

	if core.itemBloodChalice ~= nil and not core.itemBloodChalice:IsValid() then
		core.itemBloodChalice = nil
	end
	
	if bUpdated then
		if core.itemSheepstick and itemLexTalionis and itemBloodChalice then
			return
		end

		local inventory = core.unitSelf:GetInventory(true)
		for slot = 1, 12, 1 do
			local curItem = inventory[slot]
			if curItem then
				if core.itemSheepstick == nil and curItem:GetName() == "Item_Morph" then
					core.itemSheepstick = core.WrapInTable(curItem)
				elseif core.itemLexTalionis == nil and curItem:GetName() == "Item_LexTalionis" then
					core.itemLexTalionis = core.WrapInTable(curItem)
				elseif core.itemBloodChalice == nil and curItem:GetName() == "Item_BloodChalice" then
					core.itemBloodChalice = core.WrapInTable(curItem)
				end
			end
		end
	end
end
object.FindItemsOld = core.FindItems
core.FindItems = funcFindItemsOverride

-----------------------------
------Harass behaviour-------
-----------------------------

local function HarassHeroExecuteOverride(botBrain)

    local unitTarget = behaviorLib.heroTarget
	if unitTarget == nil then
        return object.harassExecuteOld(botBrain)  --Target is invalid, move on to the next behavior
    end


    local unitSelf = core.unitSelf
    local vecMyPosition = unitSelf:GetPosition()

    local vecTargetPosition = unitTarget:GetPosition()
    local nTargetDistanceSq = Vector3.Distance2DSq(vecMyPosition, vecTargetPosition)


    local nLastHarassUtility = behaviorLib.lastHarassUtil
    local bActionTaken = false
	if (unitTarget:GetHealthPercent() <= .15) then
		botBrain:OrderItem(core.itemBloodChalice.object or core.itemBloodChalice, false)
	end

    if core.CanSeeUnit(botBrain, unitTarget) then
		local bTargetVuln = unitTarget:IsStunned() or unitTarget:IsImmobilized() or unitTarget:IsPerplexed()
        core.FindItems()
        local itemSheepstick = core.itemSheepstick
		local itemLexTalionis = core.itemLexTalionis

        -- Sheepstick - on unit.
        if not bActionTaken and not bTargetVuln and itemSheepstick and itemSheepstick:CanActivate() and nLastHarassUtility > botBrain.nSheepstickThreshold then
			local nRange = itemSheepstick:GetRange()
			if nTargetDistanceSq < (nRange*nRange) then
				bActionTaken = core.OrderItemEntityClamp(botBrain, unitSelf, itemSheepstick, unitTarget)
            end
		end
		
		--Lex
		if itemLexTalionis and itemLexTalionis:CanActivate() and nLastHarassUtility > botBrain.nLexTalionisThreshold then
            local nRange = itemLexTalionis:GetRange()
            if nTargetDistanceSq < (nRange*nRange) then
                bActionTaken = core.OrderItemEntityClamp(botBrain, unitSelf, itemLexTalionis, unitTarget)
            end
        end
        -- Retribution
        local abilRetribution = skills.abilRetribution
        if abilRetribution:CanActivate() and nLastHarassUtility > botBrain.nRetributionThreshold then
            local nRange = abilRetribution:GetRange()
            if nTargetDistanceSq < (nRange * nRange) then
				bActionTaken = core.OrderAbilityEntity(botBrain, abilRetribution, unitTarget)
			end
        end
	end
    
	if not bActionTaken then
        return object.harassExecuteOld(botBrain)
    end

    return bActionTaken
end
object.harassExecuteOld = behaviorLib.HarassHeroBehavior["Execute"]
behaviorLib.HarassHeroBehavior["Execute"] = HarassHeroExecuteOverride

---------------------------------------------
----      Martyr's Help Behaviour        ----
----	Util:							 ----
----	Execute: Use Guardian Angel	 	 ----
----			 Use Sacrificial Lamb	 ----
----			 Use Hand in Hand		 ----
---------------------------------------------

behaviorLib.nHealUtilityMul = 0.8
behaviorLib.nHealHealthUtilityMul = 1.0
behaviorLib.nHealTimeToLiveUtilityMul = 0.5

function behaviorLib.HealHealthUtilityFn(unitHero)
	local nUtility = 0

	local nYIntercept = 100
	local nXIntercept = 100
	local nOrder = 2

	nUtility = core.ExpDecay(unitHero:GetHealthPercent() * 100, nYIntercept, nXIntercept, nOrder)

	return nUtility
end

function behaviorLib.TimeToLiveUtilityFn(unitHero)
	local nUtility = 0
	local nTimeToLive = 9999

	if unitHero.bIsMemoryUnit then
		local nHealthVelocity = unitHero:GetHealthVelocity()
		local nHealth = unitHero:GetHealth()
		if nHealthVelocity < 0 then
			nTimeToLive = nHealth / (-1 * nHealthVelocity)

			local nYIntercept = 100
			local nXIntercept = 20
			local nOrder = 2
			nUtility = core.ExpDecay(nTimeToLive, nYIntercept, nXIntercept, nOrder)
		end
	end

	nUtility = Clamp(nUtility, 0, 100)

	return nUtility, nTimeToLive
end

behaviorLib.nHealCostBonus = 10
behaviorLib.nHealCostBonusCooldownThresholdMul = 4.0
function behaviorLib.AbilityCostBonusFn(unitSelf, ability)
	local bDebugEchos = false

	local nCost =		ability:GetManaCost()
	local nCooldownMS =	ability:GetCooldownTime()
	local nRegen =		unitSelf:GetManaRegen()

	local nTimeToRegenMS = nCost / nRegen * 1000

	if nTimeToRegenMS < nCooldownMS * behaviorLib.nHealCostBonusCooldownThresholdMul then
		return behaviorLib.nHealCostBonus
	end

	return 0
end

behaviorLib.unitHealTarget = nil
behaviorLib.nHealTimeToLive = nil
behaviorLib.nHandInHandTimeToLiveThreshold = 6
function behaviorLib.HealUtility(botBrain)
	local bDebugEchos = false

	local nUtility = 0

	local abilHandInHand = skills.abilHandInHand
	local abilGuardianAngel = skills.abilGuardianAngel
	local abilSacrificialLamb = skills.abilSacrificialLamb

	local unitSelf = core.unitSelf

	behaviorLib.unitHealTarget = nil

	local nHighestUtility = 0
	local unitTarget = nil
	local nTargetTimeToLive = nil
	local sAbilName = ""
	if abilGuardianAngel:CanActivate() or abilSacrificialLamb:CanActivate() then
		local tTargets = core.CopyTable(core.localUnits["AllyHeroes"])
		for key, hero in pairs(tTargets) do
			if hero:GetUniqueID() ~= unitSelf:GetUniqueID() or core.GetCurrentBehaviorName(botBrain) ~= "HealAtWell" then
				local nCurrentUtility = 0

				local nHealthUtility = behaviorLib.HealHealthUtilityFn(hero) * behaviorLib.nHealHealthUtilityMul
				local nTimeToLiveUtility = nil
				local nCurrentTimeToLive = nil
				nTimeToLiveUtility, nCurrentTimeToLive = behaviorLib.TimeToLiveUtilityFn(hero)
				nTimeToLiveUtility = nTimeToLiveUtility * behaviorLib.nHealTimeToLiveUtilityMul
				nCurrentUtility = nHealthUtility + nTimeToLiveUtility

				if nCurrentUtility > nHighestUtility then
					nHighestUtility = nCurrentUtility
					nTargetTimeToLive = nCurrentTimeToLive
					unitTarget = hero
				end
			end
		end

		if unitTarget and abilHandInHand:CanActivate() and nTargetTimeToLive <= behaviorLib.nHandInHandTimeToLiveThreshold then
			local nCostBonus = behaviorLib.AbilityCostBonusFn(core.unitSelf, abilHandInHand)

			nUtility = nHighestUtility + nCostBonus

			if nUtility == 0 and abilGuardianAngel:CanActivate() then
				local nCostBonus = behaviorLib.AbilityCostBonusFn(core.unitSelf, abilGuardianAngel)

				nUtility = nHighestUtility + nCostBonus
				sAbilName = "GuardianAngel"
			end

			if nUtility == 0 and (abilSacrificialLamb and abilSacrificialLamb:CanActivate()) then
				nUtility = nHighestUtility

				sAbilName = "SacrificialLamb"
			end

			if nUtility ~= 0 then
				behaviorLib.unitHealTarget = unitTarget
				behaviorLib.nHealTimeToLive = nTargetTimeToLive
			end
		end
	end

	nUtility = nUtility * behaviorLib.nHealUtilityMul

	return nUtility
end

function behaviorLib.HealExecute(botBrain)
	local abilHandInHand = skills.abilHandInHand
	local abilGuardianAngel = skills.abilGuardianAngel
	local abilSacrificialLamb = skills.abilSacrificialLamb

	local unitHealTarget = behaviorLib.unitHealTarget
	local nHealTimeToLive = behaviorLib.nHealTimeToLive
	
	local unitSelf = core.unitSelf

	if unitSelf:IsChanneling() then
		return
	end


	if unitHealTarget then
		if nHealTimeToLive <= behaviorLib.nHandInHandTimeToLiveThreshold and abilHandInHand:CanActivate() and unitHealTarget:GetHealthPercent() < .25 then
			core.OrderAbilityEntity(botBrain, abilHandInHand, unitHealTarget)
		elseif abilGuardianAngel:CanActivate() then
			core.OrderAbilityEntity(botBrain, abilGuardian, unitHealTarget)
		elseif abilSacrificialLamb and abilSacrificialLamb:CanActivate() then
			local vecTargetPosition = unitHealTarget:GetPosition()
			local nDistance = Vector3.Distance2D(unitSelf:GetPosition(), vecTargetPosition)
			local nRadius = abilSacrificialLamb:GetRadius()
			if nDistance < abilSacrificialLamb.nRadius then
				core.OrderAbilityClamp(botBrain, abilSacrificialLamb)
			else
				core.OrderMoveToUnitClamp(botBrain, unitSelf, unitHealTarget)
			end
		else
			return false
		end
	else
		return false
	end

	return
end
behaviorLib.HealBehavior = {}
behaviorLib.HealBehavior["Utility"] = behaviorLib.HealUtility
behaviorLib.HealBehavior["Execute"] = behaviorLib.HealExecute
behaviorLib.HealBehavior["Name"] = "Heal"
tinsert(behaviorLib.tBehaviors, behaviorLib.HealBehavior)


---------------------------------------
---              Personality                     ---
---------------------------------------

core.tKillChatKeys = {
        "Divine Retribution!",
        "Perish!",
        "May the light of Sol consume you!",
        "And you thought you had me didn't you?",
        "That nuke!"
}

core.tDeathChatKeys = {
        "I'm coming Sol..",
        "Must've used Sacrificial Lamb too much..",
        "Sorry team, I failed you.."
}



BotEcho(object:GetName()..' finished loading martyr_main')
